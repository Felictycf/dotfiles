var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@umijs/utils");
var import_fs = require("fs");
var import_path = require("path");
var testData = {
  name: "umi-plugin-demo",
  description: "nothing",
  mail: "xiaohuoni@gmail.com",
  author: "xiaohuoni",
  org: "umijs",
  version: require("../package").version,
  npmClient: "pnpm",
  registry: "https://registry.npmjs.org/"
};
var src_default = async ({ cwd, args }) => {
  const [name] = args._;
  let npmClient = "pnpm";
  let registry = "https://registry.npmjs.org/";
  let appTemplate = "app";
  const { username, email } = await (0, import_utils.getGitInfo)();
  let author = email && username ? `${username} <${email}>` : "";
  if (!args.default) {
    const response = await (0, import_utils.prompts)([
      {
        type: "select",
        name: "appTemplate",
        message: "Pick Umi App Template",
        choices: [
          { title: "Simple App", value: "app" },
          { title: "Ant Design Pro", value: "max" },
          { title: "Vue Simple App", value: "vue-app" }
        ],
        initial: 0
      },
      {
        type: "select",
        name: "npmClient",
        message: "Pick Npm Client",
        choices: [
          { title: "npm", value: "npm" },
          { title: "cnpm", value: "cnpm" },
          { title: "tnpm", value: "tnpm" },
          { title: "yarn", value: "yarn" },
          { title: "pnpm", value: "pnpm" }
        ],
        initial: 4
      },
      {
        type: "select",
        name: "registry",
        message: "Pick Npm Registry",
        choices: [
          {
            title: "npm",
            value: "https://registry.npmjs.org/",
            selected: true
          },
          { title: "taobao", value: "https://registry.npmmirror.com" }
        ]
      }
    ], {
      onCancel() {
        process.exit(1);
      }
    });
    npmClient = response.npmClient;
    registry = response.registry;
    appTemplate = response.appTemplate;
  }
  const pluginPrompts = [
    {
      name: "name",
      type: "text",
      message: `What's the plugin name?`,
      default: name
    },
    {
      name: "description",
      type: "text",
      message: `What's your plugin used for?`
    },
    {
      name: "mail",
      type: "text",
      message: `What's your email?`
    },
    {
      name: "author",
      type: "text",
      message: `What's your name?`
    },
    {
      name: "org",
      type: "text",
      message: `Which organization is your plugin stored under github?`
    }
  ];
  const target = name ? (0, import_path.join)(cwd, name) : cwd;
  const templateName = args.plugin ? "plugin" : appTemplate;
  const version = require("../package").version;
  const monorepoRoot = await detectMonorepoRoot({ target });
  const inMonorepo = !!monorepoRoot;
  const projectRoot = inMonorepo ? monorepoRoot : target;
  const shouldInitGit = args.git !== false;
  const withHusky = shouldInitGit && !inMonorepo;
  const generator = new import_utils.BaseGenerator({
    path: (0, import_path.join)(__dirname, "..", "templates", templateName),
    target,
    data: args.default ? testData : {
      version: version.includes("-canary.") ? version : `^${version}`,
      npmClient,
      registry,
      author,
      withHusky,
      extraNpmrc: npmClient === "pnpm" ? `strict-peer-dependencies=false` : ""
    },
    questions: args.default ? [] : args.plugin ? pluginPrompts : []
  });
  await generator.run();
  const context = {
    inMonorepo,
    target,
    projectRoot
  };
  if (!withHusky) {
    await removeHusky(context);
  }
  if (inMonorepo) {
    await moveNpmrc(context);
  }
  if (shouldInitGit) {
    await initGit(context);
  } else {
    import_utils.logger.info(`Skip Git init`);
  }
  if (!args.default && args.install !== false) {
    (0, import_utils.installWithNpmClient)({ npmClient, cwd: target });
  } else {
    import_utils.logger.info(`Skip install deps`);
  }
};
async function detectMonorepoRoot(opts) {
  const { target } = opts;
  const rootPkg = await import_utils.pkgUp.pkgUp({ cwd: (0, import_path.dirname)(target) });
  if (!rootPkg) {
    return null;
  }
  const rootDir = (0, import_path.dirname)(rootPkg);
  if ((0, import_utils.tryPaths)([
    (0, import_path.join)(rootDir, "lerna.json"),
    (0, import_path.join)(rootDir, "pnpm-workspace.yaml")
  ])) {
    return rootDir;
  }
  return null;
}
async function moveNpmrc(opts) {
  const { target, projectRoot } = opts;
  const sourceNpmrc = (0, import_path.join)(target, "./.npmrc");
  const targetNpmrc = (0, import_path.join)(projectRoot, "./.npmrc");
  if (!(0, import_fs.existsSync)(targetNpmrc)) {
    await import_utils.fsExtra.copyFile(sourceNpmrc, targetNpmrc);
  }
  await import_utils.fsExtra.remove(sourceNpmrc);
}
async function initGit(opts) {
  const { projectRoot } = opts;
  const isGit = (0, import_fs.existsSync)((0, import_path.join)(projectRoot, ".git"));
  if (isGit)
    return;
  try {
    await import_utils.execa.execa("git", ["init"], { cwd: projectRoot });
    import_utils.logger.ready(`Git initialized successfully`);
  } catch {
    import_utils.logger.error(`Initial the git repo failed`);
  }
}
async function removeHusky(opts) {
  const dir = (0, import_path.join)(opts.target, "./.husky");
  if ((0, import_fs.existsSync)(dir)) {
    await import_utils.fsExtra.remove(dir);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
